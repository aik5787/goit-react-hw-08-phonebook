{"version":3,"file":"static/js/321.80d8cec8.chunk.js","mappings":"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","sources":["redux/contactsOperations.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.js","components/ContactListItem /ContactListItem.styled.js","components/ContactListItem /ContactListItem.js","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.js","components/Pages/Contacts/Contacts.styled.js","components/Pages/Contacts/Contacts.js"],"sourcesContent":["import { createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nexport const fetchContacts = createAsyncThunk('contacts/fetchAll', async () => {\n  const response = await axios.get(\n    'https://6526e0d7917d673fd76d2701.mockapi.io/contacts'\n  );\n  return response.data;\n});\n\nexport const addContact = createAsyncThunk(\n  'contacts/addContact',\n  async newContact => {\n    const response = await axios.post(\n      'https://6526e0d7917d673fd76d2701.mockapi.io/contacts',\n      newContact\n    );\n    return response.data;\n  }\n);\n\nexport const deleteContact = createAsyncThunk(\n  'contacts/deleteContact',\n  async contactId => {\n    await axios.delete(\n      `https://6526e0d7917d673fd76d2701.mockapi.io/contacts/${contactId}`\n    );\n    return contactId;\n  }\n);\n","import styled from 'styled-components';\n\nexport const ContactFormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0 0 20px 0;\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const FormInput = styled.input`\n  padding: 5px;\n  margin-bottom: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\n\nexport const FormButton = styled.button`\n  width: 150px;\n  font-size: 17px;\n  border-radius: 4px;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContact } from 'redux/contactsOperations';\n// import { nanoid } from 'nanoid';\nimport {\n  ContactFormContainer,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n  const newContact = { name: name, number: number };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') return;\n\n    const isExistingContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExistingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ContactFormContainer onSubmit={handleSubmit}>\n      <FormLabel htmlFor=\"nameInput\">Name</FormLabel>\n      <FormInput\n        id=\"nameInput\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleNameChange}\n      />\n      <FormLabel htmlFor=\"numberInput\">Number</FormLabel>\n      <FormInput\n        id=\"numberInput\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleNumberChange}\n      />\n      <FormButton type=\"submit\" disabled={!name || !number}>\n        Add contact\n      </FormButton>\n    </ContactFormContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0;\n  padding: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getFilter } from 'redux/filterSlice';\nimport {\n  FilterContainer,\n  FilterLabel,\n  FilterInput,\n} from './ContactFilter.styled';\n\nconst ContactFilter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor=\"nameFilterInput\">Find contacts by name</FilterLabel>\n      <FilterInput\n        id=\"nameFilterInput\"\n        type=\"text\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterContainer>\n  );\n};\n\nexport default ContactFilter;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li``;\n\nexport const ListItemWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`;\n\nexport const ListItemInfo = styled.span``;\n\nexport const ListItemButton = styled.button`\n  background-color: #f44336;\n  color: #fff;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #d32f2f;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getContacts, getLoading, getError } from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { deleteContact, fetchContacts } from 'redux/contactsOperations';\nimport { useEffect } from 'react';\n\nimport {\n  ListItem,\n  ListItemWrapper,\n  ListItemInfo,\n  ListItemButton,\n} from './ContactListItem.styled';\n\nexport const ContactListItem = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredContacts = () => {\n    if (!contacts) return [];\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (error) {\n    return <h2>{error}</h2>;\n  }\n  if (contacts.length > 0) {\n    return filteredContacts.map(contact => (\n      <ListItem key={contact.id}>\n        <ListItemWrapper>\n          <ListItemInfo>\n            {contact.name}: {contact.number}\n          </ListItemInfo>\n          <ListItemButton onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </ListItemButton>\n        </ListItemWrapper>\n      </ListItem>\n    ));\n  }\n};\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 10px;\n  margin: 0;\n  padding: 20px 40px;\n`;\n","import { ContactListItem } from '../ContactListItem /ContactListItem';\nimport { ListContainer } from './ContactList.styled';\n\nconst ContactList = () => {\n  return (\n    <ListContainer>\n      <ContactListItem />\n    </ListContainer>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px;\n`;\n\nexport const TitleHone = styled.h2`\n  margin: 0 0 20px 0;\n  padding: 0;\n`;\n\nexport const TitleHtwo = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n","import ContactForm from '../../ContactForm/ContactForm';\nimport ContactFilter from '../../ContactFilter/ContactFilter';\nimport ContactList from '../../ContactList/ContactList';\nimport { Container, TitleHone, TitleHtwo } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <Container>\n      <TitleHone>Phonebook</TitleHone>\n      <ContactForm />\n      <TitleHtwo>Contacts</TitleHtwo>\n      <ContactFilter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["fetchContacts","createAsyncThunk","axios","response","data","addContact","newContact","deleteContact","contactId","ContactFormContainer","styled","FormLabel","FormInput","FormButton","useState","name","setName","number","setNumber","contacts","useSelector","getContacts","dispatch","useDispatch","onSubmit","event","preventDefault","trim","some","contact","toLowerCase","alert","htmlFor","id","type","pattern","title","required","value","onChange","target","disabled","FilterContainer","FilterLabel","FilterInput","filter","getFilter","setFilter","ListItem","ListItemWrapper","ListItemInfo","ListItemButton","ContactListItem","loading","getLoading","error","getError","useEffect","filteredContacts","includes","length","map","onClick","ListContainer","Container","TitleHone","TitleHtwo"],"sourceRoot":""}