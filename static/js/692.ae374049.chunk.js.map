{"version":3,"file":"static/js/692.ae374049.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/ContactFilter/ContactFilter.styled.js","components/ContactFilter/ContactFilter.js","components/ContactListItem /ContactListItem.styled.js","components/ContactListItem /ContactListItem.js","components/ContactList/ContactList.styled.js","components/Modal/Modal.styled.js","components/Modal/Modal.js","components/ContactList/ContactList.js","components/Pages/Contacts/Contacts.styled.js","components/Pages/Contacts/Contacts.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ContactFormContainer = styled.form`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0 0 20px 0;\n  border: 1px solid #ccc;\n  padding: 20px;\n`;\n\nexport const FormLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const FormInput = styled.input`\n  padding: 5px;\n  margin-bottom: 20px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\n\nexport const FormButton = styled.button`\n  width: 150px;\n  font-size: 17px;\n  border-radius: 4px;\n  padding: 5px 10px;\n  background-color: #007bff;\n  color: #fff;\n  border: none;\n  cursor: pointer;\n  transition: background-color 0.3s;\n\n  &:hover {\n    background-color: #0056b3;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContact } from 'redux/auth/thunk';\n// import { nanoid } from 'nanoid';\nimport {\n  ContactFormContainer,\n  FormLabel,\n  FormInput,\n  FormButton,\n} from './ContactForm.styled';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n  const newContact = { name: name, number: number };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') return;\n\n    const isExistingContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExistingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <ContactFormContainer onSubmit={handleSubmit}>\n      <FormLabel htmlFor=\"nameInput\">Name</FormLabel>\n      <FormInput\n        id=\"nameInput\"\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleNameChange}\n      />\n      <FormLabel htmlFor=\"numberInput\">Number</FormLabel>\n      <FormInput\n        id=\"numberInput\"\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleNumberChange}\n      />\n      <FormButton type=\"submit\" disabled={!name || !number}>\n        Add contact\n      </FormButton>\n    </ContactFormContainer>\n  );\n};\n\nexport default ContactForm;\n","import styled from 'styled-components';\n\nexport const FilterContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  margin: 0;\n  padding: 20px;\n`;\n\nexport const FilterLabel = styled.label`\n  margin-bottom: 10px;\n  font-size: 18px;\n  font-weight: 600;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 5px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  font-size: 18px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getFilter } from 'redux/filterSlice';\nimport {\n  FilterContainer,\n  FilterLabel,\n  FilterInput,\n} from './ContactFilter.styled';\n\nconst ContactFilter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <FilterContainer>\n      <FilterLabel htmlFor=\"nameFilterInput\">Find contacts by name</FilterLabel>\n      <FilterInput\n        id=\"nameFilterInput\"\n        type=\"text\"\n        value={filter}\n        onChange={handleFilterChange}\n      />\n    </FilterContainer>\n  );\n};\n\nexport default ContactFilter;\n","import styled from 'styled-components';\n\nexport const ListItem = styled.li``;\n\nexport const ListItemWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  font-size: 18px;\n`;\n\nexport const ListItemInfo = styled.span``;\n\nexport const ListItemButton = styled.button`\n  background-color: #f44336;\n  color: #fff;\n  border: none;\n  padding: 5px 10px;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.2s;\n\n  &:hover {\n    background-color: #d32f2f;\n  }\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getLoading,\n  getError,\n  openEditModal,\n} from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { deleteContact, fetchContacts } from 'redux/auth/thunk';\nimport { useEffect } from 'react';\n\nimport {\n  ListItem,\n  ListItemWrapper,\n  ListItemInfo,\n  ListItemButton,\n} from './ContactListItem.styled';\n\nimport { accessToken } from '../../redux/auth/authSlice';\n\nexport const ContactListItem = () => {\n  const token = useSelector(accessToken);\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  console.log(contacts);\n  useEffect(() => {\n    if (token) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, token]);\n\n  const getFilteredContacts = () => {\n    if (!contacts || !Array.isArray(contacts)) return [];\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n\n  if (loading) {\n    return <h2>Loading...</h2>;\n  }\n\n  if (error) {\n    return <h2>{error}</h2>;\n  }\n\n  if (contacts.length > 0) {\n    return filteredContacts.map(contact => (\n      <ListItem key={contact.id}>\n        <ListItemWrapper>\n          <ListItemInfo>\n            {contact.name}: {contact.number}\n          </ListItemInfo>\n          <ListItemButton onClick={() => dispatch(openEditModal(contact))}>\n            Edit\n          </ListItemButton>\n          <ListItemButton onClick={() => dispatch(deleteContact(contact.id))}>\n            Delete\n          </ListItemButton>\n        </ListItemWrapper>\n      </ListItem>\n    ));\n  }\n};\n","import styled from 'styled-components';\n\nexport const ListContainer = styled.ul`\n  display: flex;\n  flex-direction: column;\n  width: 300px;\n  gap: 10px;\n  margin: 0;\n  padding: 20px 40px;\n`;\n","import styled from 'styled-components';\n\nexport const Overlay = styled.div`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.8);\n  z-index: 1200;\n`;\n\nexport const ModalStyle = styled.div`\n  max-width: calc(100vw - 48px);\n  max-height: calc(100vh - 24px);\n`;\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getIsEditModalOpen,\n  getContactForEdit,\n  closeEditModal,\n} from 'redux/contactsSlice';\nimport { editContact } from '../../redux/auth/thunk';\nimport { Overlay, ModalStyle } from './Modal.styled';\n\nconst Modal = () => {\n  const isOpenModal = useSelector(getIsEditModalOpen);\n  const contactForEdit = useSelector(getContactForEdit);\n  //   const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(contactForEdit.name);\n  const [number, setNumber] = useState(contactForEdit.number);\n\n  useEffect(() => {\n    const handleKeyDown = e => {\n      if (e.code === 'Escape' && isOpenModal) {\n        dispatch(closeEditModal());\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  }, [isOpenModal, dispatch]);\n\n  const handleBackdropClick = e => {\n    if (e.target === e.currentTarget) {\n      dispatch(closeEditModal());\n    }\n  };\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n\n  const editedContact = { name: name, number: number };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') return;\n\n    // const isExistingContact = contacts.some(\n    //   contact => contact.name.toLowerCase() === name.toLowerCase()\n    // );\n\n    // if (isExistingContact) {\n    //   alert(`${name} is already in contacts.`);\n    //   return;\n    // }\n    dispatch(editContact({ contactId: contactForEdit.id, editedContact }));\n    dispatch(closeEditModal());\n  };\n\n  return (\n    isOpenModal &&\n    contactForEdit && (\n      <Overlay onClick={handleBackdropClick}>\n        <ModalStyle>\n          <h2>Edit Contact</h2>\n          <form>\n            <div>\n              <label htmlFor=\"name\">Name</label>\n              <input\n                type=\"text\"\n                id=\"name\"\n                name=\"name\"\n                value={name || ''}\n                onChange={handleNameChange}\n              />\n            </div>\n\n            <div>\n              <label htmlFor=\"phone\">Phone</label>\n              <input\n                type=\"tel\"\n                id=\"phone\"\n                name=\"phone\"\n                value={number || ''}\n                onChange={handleNumberChange}\n              />\n            </div>\n            <button type=\"button\" onClick={handleSubmit}>\n              Save\n            </button>\n          </form>\n        </ModalStyle>\n      </Overlay>\n    )\n  );\n};\n\nexport default Modal;\n","import { ContactListItem } from '../ContactListItem /ContactListItem';\nimport { ListContainer } from './ContactList.styled';\nimport { getIsEditModalOpen } from '../../redux/contactsSlice';\nimport { useSelector } from 'react-redux';\nimport Modal from '../Modal/Modal';\n\nconst ContactList = () => {\n  const isOpenModal = useSelector(getIsEditModalOpen);\n  return (\n    <ListContainer>\n      {isOpenModal && <Modal />}\n      <ContactListItem />\n    </ListContainer>\n  );\n};\n\nexport default ContactList;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  padding: 20px;\n`;\n\nexport const TitleHone = styled.h2`\n  margin: 0 0 20px 0;\n  padding: 0;\n`;\n\nexport const TitleHtwo = styled.h2`\n  margin: 0;\n  padding: 0;\n`;\n","import ContactForm from '../../ContactForm/ContactForm';\nimport ContactFilter from '../../ContactFilter/ContactFilter';\nimport ContactList from '../../ContactList/ContactList';\nimport { Container, TitleHone, TitleHtwo } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <Container>\n      <TitleHone>Phonebook</TitleHone>\n      <ContactForm />\n      <TitleHtwo>Contacts</TitleHtwo>\n      <ContactFilter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactFormContainer","styled","FormLabel","FormInput","FormButton","useState","name","setName","number","setNumber","contacts","useSelector","getContacts","dispatch","useDispatch","newContact","onSubmit","event","preventDefault","trim","some","contact","toLowerCase","alert","addContact","htmlFor","id","type","pattern","title","required","value","onChange","target","disabled","FilterContainer","FilterLabel","FilterInput","filter","getFilter","setFilter","ListItem","ListItemWrapper","ListItemInfo","ListItemButton","ContactListItem","token","accessToken","loading","getLoading","error","getError","console","log","useEffect","fetchContacts","filteredContacts","Array","isArray","includes","length","map","onClick","openEditModal","deleteContact","ListContainer","Overlay","ModalStyle","isOpenModal","getIsEditModalOpen","contactForEdit","getContactForEdit","handleKeyDown","e","code","closeEditModal","window","addEventListener","removeEventListener","editedContact","currentTarget","editContact","contactId","Container","TitleHone","TitleHtwo"],"sourceRoot":""}