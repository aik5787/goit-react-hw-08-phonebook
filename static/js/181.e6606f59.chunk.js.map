{"version":3,"file":"static/js/181.e6606f59.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/ContactFilter/ContactFilter.js","components/ContactListItem /ContactListItem.js","components/Modal/Modal.js","components/ContactList/ContactList.js","components/Pages/Contacts/Contacts.js"],"sourcesContent":["import { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContacts } from 'redux/contactsSlice';\nimport { addContact } from 'redux/auth/thunk';\nimport {\n  Container,\n  FormControl,\n  FormLabel,\n  Input,\n  Button,\n} from '@chakra-ui/react';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n\n  const newContact = { name: name, number: number };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') return;\n\n    const isExistingContact = contacts.some(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (isExistingContact) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n    dispatch(addContact(newContact));\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Container maxW=\"md\">\n      <form onSubmit={handleSubmit}>\n        <FormControl>\n          <FormLabel htmlFor=\"nameInput\">Name</FormLabel>\n          <Input\n            id=\"nameInput\"\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleNameChange}\n          />\n        </FormControl>\n        <FormControl>\n          <FormLabel htmlFor=\"numberInput\">Number</FormLabel>\n          <Input\n            id=\"numberInput\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleNumberChange}\n          />\n        </FormControl>\n        <Button mt={4} type=\"submit\" disabled={!name || !number}>\n          Add contact\n        </Button>\n      </form>\n    </Container>\n  );\n};\n\nexport default ContactForm;\n\n// import { useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { getContacts } from 'redux/contactsSlice';\n// import { addContact } from 'redux/auth/thunk';\n// // import { nanoid } from 'nanoid';\n// import {\n//   ContactFormContainer,\n//   FormLabel,\n//   FormInput,\n//   FormButton,\n// } from './ContactForm.styled';\n\n// const ContactForm = () => {\n//   const [name, setName] = useState('');\n//   const [number, setNumber] = useState('');\n//   const contacts = useSelector(getContacts);\n//   const dispatch = useDispatch();\n\n//   const handleNameChange = event => {\n//     setName(event.target.value);\n//   };\n\n//   const handleNumberChange = event => {\n//     setNumber(event.target.value);\n//   };\n//   const newContact = { name: name, number: number };\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n\n//     if (name.trim() === '' || number.trim() === '') return;\n\n//     const isExistingContact = contacts.some(\n//       contact => contact.name.toLowerCase() === name.toLowerCase()\n//     );\n\n//     if (isExistingContact) {\n//       alert(`${name} is already in contacts.`);\n//       return;\n//     }\n//     dispatch(addContact(newContact));\n//     setName('');\n//     setNumber('');\n//   };\n\n//   return (\n//     <ContactFormContainer onSubmit={handleSubmit}>\n//       <FormLabel htmlFor=\"nameInput\">Name</FormLabel>\n//       <FormInput\n//         id=\"nameInput\"\n//         type=\"text\"\n//         name=\"name\"\n//         pattern=\"^[a-zA-Zа-яА-Я]+(([' \\-][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//         title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n//         required\n//         value={name}\n//         onChange={handleNameChange}\n//       />\n//       <FormLabel htmlFor=\"numberInput\">Number</FormLabel>\n//       <FormInput\n//         id=\"numberInput\"\n//         type=\"tel\"\n//         name=\"number\"\n//         pattern=\"\\+?\\d{1,4}?[ .\\-\\s]?\\(?\\d{1,3}?\\)?[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,4}[ .\\-\\s]?\\d{1,9}\"\n//         title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n//         required\n//         value={number}\n//         onChange={handleNumberChange}\n//       />\n//       <FormButton type=\"submit\" disabled={!name || !number}>\n//         Add contact\n//       </FormButton>\n//     </ContactFormContainer>\n//   );\n// };\n\n// export default ContactForm;\n","import { Box, Input, FormControl, FormLabel } from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { setFilter, getFilter } from 'redux/filterSlice';\n\nconst ContactFilter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const handleFilterChange = event => {\n    dispatch(setFilter(event.target.value));\n  };\n\n  return (\n    <Box mb={8}>\n      <FormControl>\n        <FormLabel htmlFor=\"nameFilterInput\">Find contacts by name</FormLabel>\n        <Input\n          id=\"nameFilterInput\"\n          type=\"text\"\n          value={filter}\n          onChange={handleFilterChange}\n        />\n      </FormControl>\n    </Box>\n  );\n};\n\nexport default ContactFilter;\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import { setFilter, getFilter } from 'redux/filterSlice';\n// import {\n//   FilterContainer,\n//   FilterLabel,\n//   FilterInput,\n// } from './ContactFilter.styled';\n\n// const ContactFilter = () => {\n//   const filter = useSelector(getFilter);\n//   const dispatch = useDispatch();\n\n//   const handleFilterChange = event => {\n//     dispatch(setFilter(event.target.value));\n//   };\n\n//   return (\n//     <FilterContainer>\n//       <FilterLabel htmlFor=\"nameFilterInput\">Find contacts by name</FilterLabel>\n//       <FilterInput\n//         id=\"nameFilterInput\"\n//         type=\"text\"\n//         value={filter}\n//         onChange={handleFilterChange}\n//       />\n//     </FilterContainer>\n//   );\n// };\n\n// export default ContactFilter;\n","import {\n  Box,\n  Text,\n  Button,\n  Center,\n  Flex,\n  Spinner,\n  Alert,\n  AlertIcon,\n  AlertTitle,\n  AlertDescription,\n  SimpleGrid,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getContacts,\n  getLoading,\n  getError,\n  openEditModal,\n} from 'redux/contactsSlice';\nimport { getFilter } from 'redux/filterSlice';\nimport { deleteContact, fetchContacts } from 'redux/auth/thunk';\nimport { useEffect } from 'react';\n\nimport { accessToken } from '../../redux/auth/authSlice';\n\nconst ContactListItem = () => {\n  const token = useSelector(accessToken);\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    if (token) {\n      dispatch(fetchContacts());\n    }\n  }, [dispatch, token]);\n\n  const getFilteredContacts = () => {\n    if (!contacts || !Array.isArray(contacts)) return [];\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n  const filteredContacts = getFilteredContacts();\n\n  if (loading) {\n    return (\n      <Center h=\"60vh\">\n        <Spinner size=\"xl\" thickness=\"4px\" speed=\"0.65s\" color=\"teal.500\" />\n      </Center>\n    );\n  }\n\n  if (error) {\n    return (\n      <Alert status=\"error\">\n        <AlertIcon />\n        <Box flex=\"1\">\n          <AlertTitle>Error</AlertTitle>\n          <AlertDescription display=\"block\">{error}</AlertDescription>\n        </Box>\n      </Alert>\n    );\n  }\n\n  if (contacts.length === 0) {\n    return (\n      <Text fontSize=\"lg\" mt={4}>\n        No contacts to display.\n      </Text>\n    );\n  }\n\n  return (\n    <SimpleGrid columns={1} spacing={4}>\n      {filteredContacts.map(contact => (\n        <Box\n          key={contact.id}\n          border=\"1px\"\n          borderColor=\"primary.300\"\n          borderRadius=\"md\"\n          p={4}\n        >\n          <Flex justify=\"space-between\" align=\"center\">\n            <Text fontWeight=\"bold\">\n              {contact.name}: {contact.number}\n            </Text>\n            <Flex>\n              <Button onClick={() => dispatch(openEditModal(contact))} mr={2}>\n                Edit\n              </Button>\n              <Button onClick={() => dispatch(deleteContact(contact.id))}>\n                Delete\n              </Button>\n            </Flex>\n          </Flex>\n        </Box>\n      ))}\n    </SimpleGrid>\n  );\n};\n\nexport default ContactListItem;\n\n// import { useDispatch, useSelector } from 'react-redux';\n// import {\n//   getContacts,\n//   getLoading,\n//   getError,\n//   openEditModal,\n// } from 'redux/contactsSlice';\n// import { getFilter } from 'redux/filterSlice';\n// import { deleteContact, fetchContacts } from 'redux/auth/thunk';\n// import { useEffect } from 'react';\n\n// import {\n//   ListItem,\n//   ListItemWrapper,\n//   ListItemInfo,\n//   ListItemButton,\n// } from './ContactListItem.styled';\n\n// import { accessToken } from '../../redux/auth/authSlice';\n\n// const ContactListItem = () => {\n//   const token = useSelector(accessToken);\n//   const contacts = useSelector(getContacts);\n//   const filter = useSelector(getFilter);\n//   const dispatch = useDispatch();\n//   const loading = useSelector(getLoading);\n//   const error = useSelector(getError);\n\n//   console.log(contacts);\n//   useEffect(() => {\n//     if (token) {\n//       dispatch(fetchContacts());\n//     }\n//   }, [dispatch, token]);\n\n//   const getFilteredContacts = () => {\n//     if (!contacts || !Array.isArray(contacts)) return [];\n//     return contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(filter.toLowerCase())\n//     );\n//   };\n//   const filteredContacts = getFilteredContacts();\n\n//   if (loading) {\n//     return <h2>Loading...</h2>;\n//   }\n\n//   if (error) {\n//     return <h2>{error}</h2>;\n//   }\n\n//   if (contacts.length > 0) {\n//     return filteredContacts.map(contact => (\n//       <ListItem key={contact.id}>\n//         <ListItemWrapper>\n//           <ListItemInfo>\n//             {contact.name}: {contact.number}\n//           </ListItemInfo>\n//           <ListItemButton onClick={() => dispatch(openEditModal(contact))}>\n//             Edit\n//           </ListItemButton>\n//           <ListItemButton onClick={() => dispatch(deleteContact(contact.id))}>\n//             Delete\n//           </ListItemButton>\n//         </ListItemWrapper>\n//       </ListItem>\n//     ));\n//   }\n// };\n\n// export default ContactListItem;\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getIsEditModalOpen,\n  getContactForEdit,\n  closeEditModal,\n} from 'redux/contactsSlice';\nimport { editContact } from '../../redux/auth/thunk';\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Input,\n  Button,\n} from '@chakra-ui/react';\nimport Notiflix from 'notiflix'; // Import Notiflix\n\nconst EditContactModal = () => {\n  const isOpenModal = useSelector(getIsEditModalOpen);\n  const contactForEdit = useSelector(getContactForEdit);\n  const dispatch = useDispatch();\n  const [name, setName] = useState(contactForEdit.name);\n  const [number, setNumber] = useState(contactForEdit.number);\n\n  // useEffect(() => {\n  //   const handleKeyDown = e => {\n  //     if (e.code === 'Escape' && isOpenModal) {\n  //       dispatch(closeEditModal());\n  //     }\n  //   };\n\n  //   window.addEventListener('keydown', handleKeyDown);\n\n  //   return () => {\n  //     window.removeEventListener('keydown', handleKeyDown);\n  //   };\n  // }, [isOpenModal, dispatch]);\n\n  const handleNameChange = event => {\n    setName(event.target.value);\n  };\n\n  const handleNumberChange = event => {\n    setNumber(event.target.value);\n  };\n\n  const editedContact = { name: name, number: number };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (name.trim() === '' || number.trim() === '') return;\n\n    dispatch(editContact({ contactId: contactForEdit.id, editedContact }))\n      .unwrap()\n      .then(response => {\n        if (response) {\n          Notiflix.Notify.success('Contact updated successfully');\n        } else {\n          Notiflix.Notify.failure('Edit contact failed');\n        }\n        dispatch(closeEditModal());\n      })\n      .catch(error => {\n        console.error('Registration error:', error);\n      });\n  };\n\n  return (\n    isOpenModal &&\n    contactForEdit && (\n      <Modal\n        isOpen={true}\n        onClose={() => {\n          dispatch(closeEditModal());\n        }}\n      >\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Edit Contact</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <form>\n              <div>\n                <label htmlFor=\"name\">Name</label>\n                <Input\n                  type=\"text\"\n                  id=\"name\"\n                  name=\"name\"\n                  value={name || ''}\n                  onChange={handleNameChange}\n                />\n              </div>\n\n              <div>\n                <label htmlFor=\"phone\">Phone</label>\n                <Input\n                  type=\"tel\"\n                  id=\"phone\"\n                  name=\"phone\"\n                  value={number || ''}\n                  onChange={handleNumberChange}\n                />\n              </div>\n            </form>\n          </ModalBody>\n          <ModalFooter>\n            <Button colorScheme=\"teal\" onClick={handleSubmit}>\n              Save\n            </Button>\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    )\n  );\n};\n\nexport default EditContactModal;\n\n// import React, { useState, useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import {\n//   getIsEditModalOpen,\n//   getContactForEdit,\n//   closeEditModal,\n// } from 'redux/contactsSlice';\n// import { editContact } from '../../redux/auth/thunk';\n// import { Overlay, ModalStyle } from './Modal.styled';\n\n// const Modal = () => {\n//   const isOpenModal = useSelector(getIsEditModalOpen);\n//   const contactForEdit = useSelector(getContactForEdit);\n//   //   const contacts = useSelector(getContacts);\n//   const dispatch = useDispatch();\n//   const [name, setName] = useState(contactForEdit.name);\n//   const [number, setNumber] = useState(contactForEdit.number);\n\n//   useEffect(() => {\n//     const handleKeyDown = e => {\n//       if (e.code === 'Escape' && isOpenModal) {\n//         dispatch(closeEditModal());\n//       }\n//     };\n\n//     window.addEventListener('keydown', handleKeyDown);\n\n//     return () => {\n//       window.removeEventListener('keydown', handleKeyDown);\n//     };\n//   }, [isOpenModal, dispatch]);\n\n//   const handleBackdropClick = e => {\n//     if (e.target === e.currentTarget) {\n//       dispatch(closeEditModal());\n//     }\n//   };\n\n//   const handleNameChange = event => {\n//     setName(event.target.value);\n//   };\n\n//   const handleNumberChange = event => {\n//     setNumber(event.target.value);\n//   };\n\n//   const editedContact = { name: name, number: number };\n\n//   const handleSubmit = event => {\n//     event.preventDefault();\n\n//     if (name.trim() === '' || number.trim() === '') return;\n\n//     // const isExistingContact = contacts.some(\n//     //   contact => contact.name.toLowerCase() === name.toLowerCase()\n//     // );\n\n//     // if (isExistingContact) {\n//     //   alert(`${name} is already in contacts.`);\n//     //   return;\n//     // }\n//     dispatch(editContact({ contactId: contactForEdit.id, editedContact }));\n//     dispatch(closeEditModal());\n//   };\n\n//   return (\n//     isOpenModal &&\n//     contactForEdit && (\n//       <Overlay onClick={handleBackdropClick}>\n//         <ModalStyle>\n//           <h2>Edit Contact</h2>\n//           <form>\n//             <div>\n//               <label htmlFor=\"name\">Name</label>\n//               <input\n//                 type=\"text\"\n//                 id=\"name\"\n//                 name=\"name\"\n//                 value={name || ''}\n//                 onChange={handleNameChange}\n//               />\n//             </div>\n\n//             <div>\n//               <label htmlFor=\"phone\">Phone</label>\n//               <input\n//                 type=\"tel\"\n//                 id=\"phone\"\n//                 name=\"phone\"\n//                 value={number || ''}\n//                 onChange={handleNumberChange}\n//               />\n//             </div>\n//             <button type=\"button\" onClick={handleSubmit}>\n//               Save\n//             </button>\n//           </form>\n//         </ModalStyle>\n//       </Overlay>\n//     )\n//   );\n// };\n\n// export default Modal;\n","import { SimpleGrid, useDisclosure } from '@chakra-ui/react';\nimport { useSelector } from 'react-redux';\nimport ContactListItem from '../ContactListItem /ContactListItem';\nimport EditContactModal from '../Modal/Modal';\nimport { getIsEditModalOpen } from '../../redux/contactsSlice';\n\nconst ContactList = () => {\n  const isOpenModal = useSelector(getIsEditModalOpen);\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <SimpleGrid columns={1} spacing={4}>\n      {isOpenModal && <EditContactModal isOpen={isOpen} onClose={onClose} />}\n      <ContactListItem onOpenModal={onOpen} />\n    </SimpleGrid>\n  );\n};\n\nexport default ContactList;\n\n// import { ContactListItem } from '../ContactListItem /ContactListItem';\n// import { ListContainer } from './ContactList.styled';\n// import { getIsEditModalOpen } from '../../redux/contactsSlice';\n// import { useSelector } from 'react-redux';\n// import Modal from '../Modal/Modal';\n\n// const ContactList = () => {\n//   const isOpenModal = useSelector(getIsEditModalOpen);\n//   return (\n//     <ListContainer>\n//       {isOpenModal && <Modal />}\n//       <ContactListItem />\n//     </ListContainer>\n//   );\n// };\n\n// export default ContactList;\n","import { Container, Heading } from '@chakra-ui/react';\nimport ContactForm from '../../ContactForm/ContactForm';\nimport ContactFilter from '../../ContactFilter/ContactFilter';\nimport ContactList from '../../ContactList/ContactList';\n\nconst Contacts = () => {\n  return (\n    <Container maxW=\"md\" pt={100}>\n      <Heading as=\"h1\" size=\"lg\" textAlign=\"center\" mb={4}>\n        Phonebook\n      </Heading>\n      <ContactForm />\n      <Heading as=\"h2\" size=\"md\" textAlign=\"center\" mt={4} mb={2}>\n        Contacts\n      </Heading>\n      <ContactFilter />\n      <ContactList />\n    </Container>\n  );\n};\n\nexport default Contacts;\n\n// import ContactForm from '../../ContactForm/ContactForm';\n// import ContactFilter from '../../ContactFilter/ContactFilter';\n// import ContactList from '../../ContactList/ContactList';\n// import { Container, TitleHone, TitleHtwo } from './Contacts.styled';\n\n// const Contacts = () => {\n//   return (\n//     <Container>\n//       <TitleHone>Phonebook</TitleHone>\n//       <ContactForm />\n//       <TitleHtwo>Contacts</TitleHtwo>\n//       <ContactFilter />\n//       <ContactList />\n//     </Container>\n//   );\n// };\n\n// export default Contacts;\n"],"names":["useState","name","setName","number","setNumber","contacts","useSelector","getContacts","dispatch","useDispatch","newContact","maxW","onSubmit","event","preventDefault","trim","some","contact","toLowerCase","alert","addContact","htmlFor","I","id","type","pattern","title","required","value","onChange","target","mt","disabled","filter","getFilter","mb","setFilter","token","accessToken","loading","getLoading","error","getError","useEffect","fetchContacts","filteredContacts","Array","isArray","includes","h","size","thickness","speed","color","status","flex","display","length","fontSize","columns","spacing","map","border","borderColor","borderRadius","p","justify","align","fontWeight","onClick","openEditModal","mr","deleteContact","isOpenModal","getIsEditModalOpen","contactForEdit","getContactForEdit","editedContact","isOpen","onClose","closeEditModal","colorScheme","editContact","contactId","unwrap","then","response","Notiflix","catch","console","useDisclosure","onOpen","onOpenModal","pt","as","textAlign"],"sourceRoot":""}